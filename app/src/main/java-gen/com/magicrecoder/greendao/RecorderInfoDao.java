package com.magicrecoder.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.magicrecoder.recoderapp.RecorderInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORDER_INFO".
*/
public class RecorderInfoDao extends AbstractDao<RecorderInfo, Long> {

    public static final String TABLENAME = "RECORDER_INFO";

    /**
     * Properties of entity RecorderInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Filepath = new Property(1, String.class, "filepath", false, "FILEPATH");
        public final static Property Icon = new Property(2, int.class, "icon", false, "ICON");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Often = new Property(4, String.class, "often", false, "OFTEN");
        public final static Property Info = new Property(5, String.class, "info", false, "INFO");
        public final static Property Create_time = new Property(6, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Create_user = new Property(7, String.class, "create_user", false, "CREATE_USER");
        public final static Property Tag = new Property(8, String.class, "tag", false, "TAG");
        public final static Property Action = new Property(9, int.class, "action", false, "ACTION");
    }


    public RecorderInfoDao(DaoConfig config) {
        super(config);
    }
    
    public RecorderInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORDER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FILEPATH\" TEXT," + // 1: filepath
                "\"ICON\" INTEGER NOT NULL ," + // 2: icon
                "\"NAME\" TEXT UNIQUE ," + // 3: name
                "\"OFTEN\" TEXT," + // 4: often
                "\"INFO\" TEXT," + // 5: info
                "\"CREATE_TIME\" TEXT," + // 6: create_time
                "\"CREATE_USER\" TEXT," + // 7: create_user
                "\"TAG\" TEXT," + // 8: tag
                "\"ACTION\" INTEGER NOT NULL );"); // 9: action
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_RECORDER_INFO_FILEPATH ON RECORDER_INFO" +
                " (\"FILEPATH\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORDER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecorderInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(2, filepath);
        }
        stmt.bindLong(3, entity.getIcon());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String often = entity.getOften();
        if (often != null) {
            stmt.bindString(5, often);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(6, info);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(7, create_time);
        }
 
        String create_user = entity.getCreate_user();
        if (create_user != null) {
            stmt.bindString(8, create_user);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(9, tag);
        }
        stmt.bindLong(10, entity.getAction());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecorderInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(2, filepath);
        }
        stmt.bindLong(3, entity.getIcon());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String often = entity.getOften();
        if (often != null) {
            stmt.bindString(5, often);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(6, info);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(7, create_time);
        }
 
        String create_user = entity.getCreate_user();
        if (create_user != null) {
            stmt.bindString(8, create_user);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(9, tag);
        }
        stmt.bindLong(10, entity.getAction());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecorderInfo readEntity(Cursor cursor, int offset) {
        RecorderInfo entity = new RecorderInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // filepath
            cursor.getInt(offset + 2), // icon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // often
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // info
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // create_time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // create_user
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tag
            cursor.getInt(offset + 9) // action
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecorderInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFilepath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIcon(cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOften(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInfo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreate_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreate_user(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTag(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAction(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecorderInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecorderInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecorderInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
